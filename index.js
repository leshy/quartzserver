// Generated by CoffeeScript 1.9.3
(function() {
  var Server, _, events, net,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  net = require("net");

  events = require("events");

  _ = require("underscore");

  exports.server = Server = (function(superClass) {
    extend(Server, superClass);

    function Server(port) {
      this.port = port != null ? port : 31337;
      console.log("Listening on", this.port);
      this.clients = [];
      this.server = net.createServer((function(_this) {
        return function(client) {
          console.log('client connected');
          _this.clients.push(client);
          client.on('end', function() {
            console.log('client disconnected');
            return _this.clients = _.without(_this.clients, client);
          });
          return client.on("data", function(data) {
            data = String(data);
            return _this.emit("msg", data);
          });
        };
      })(this));
      this.server.listen(this.port, (function(_this) {
        return function() {
          return console.log('server bound', _this.port);
        };
      })(this));
    }

    Server.prototype.send = function(msg) {
      msg = String(JSON.stringify(msg));
      return _.map(this.clients, function(client) {
        return client.write(msg + "\n");
      });
    };

    return Server;

  })(events.EventEmitter);

}).call(this);
